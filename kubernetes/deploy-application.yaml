apiVersion: v1
kind: Service
metadata:
  name: heldnodig-api-database
  labels:
    app: heldnodig
spec:
  ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    app: heldnodig
    tier: database
  clusterIP: None
---
apiVersion: v1
kind: Service
metadata:
  name: heldnodig-api
  labels:
    app: heldnodig
spec:
  ports:
    - port: 80
  selector:
    app: heldnodig
    tier: api
  clusterIP: None
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: heldnodig-api-ingress
  annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true" # Enables cors headers
    nginx.ingress.kubernetes.io/auth-url: "http://jwt-validate.kube-system.svc.cluster.local/jwt/check"
    cert-manager.io/cluster-issuer: letsencrypt-production
spec:
  rules:
    - host: $BASE_URL
      http:
        paths:
          - path: /api
            backend:
              serviceName: heldnodig-api
              servicePort: 80  
  tls:
    - hosts:
        - $BASE_URL
      secretName: letsencrypt-cert-$BASE_URL # Stores cert under this name
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: heldnodig-database-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: hcloud-volumes
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: heldnodig-database
  labels:
    app: heldnodig
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: heldnodig
      tier: database
  template:
    metadata:
      labels:
        app: heldnodig
        tier: database
    spec:
      containers:
        - name: heldnodig-database
          image: kartoza/postgis:12.ยง
          volumeMounts:
            - mountPath: "/var/lib/postgresql"
              name: database-data
              subPath: "postgis" # Adds sub path becomes Hetzner volumes have a lost+found folder.
          ports:
            - containerPort: 5432
              name: database
          env:
            - name: POSTGRES_USER
              value: "application"
            - name: POSTGRES_PASS
              value: "secret"
            - name: POSTGRES_DBNAME
              value: "application"
          readinessProbe:
            exec:
              command:
                - "pg_isready"
            initialDelaySeconds: 5
      volumes:
        - name: database-data
          persistentVolumeClaim:
            claimName: heldnodig-database-data
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: heldnodig-api
  labels:
    app: heldnodig
spec:
  replicas: 1
  selector:
    matchLabels:
      app: heldnodig
      tier: api
  template:
    metadata:
      labels:
        app: heldnodig
        tier: api
    spec:
      containers:
        - name: heldnodig-api
          image: $heldnodig_IMAGE
          envFrom:
            - secretRef:
                name: heldnodig-api-secrets
            - configMapRef:
                name: heldnodig-api-config
          env:
            - name: CONFIG_Database__PostgresSQL__ConnectionString
              value: "Host=heldnodig-api-database.default.svc.cluster.local;Database=application;Username=application;Password=secret;"
            - name: CONFIG_Services__Bus__Type
              value: 'rabbitmq'
            - name: CONFIG_Services__Bus__RabbitMq__ReceiveEndpoint
              value: "rabbitmq://etbaas-queue.default.svc.cluster.local"
            - name: CONFIG_Services__Bus__RabbitMq__Username
              value: "application"
            - name: CONFIG_Services__Bus__RabbitMq__Password
              value: "secret"
          readinessProbe:
            httpGet:
              port: 80
              path: "/api/internal/status"
            initialDelaySeconds: 5
          resources:
            requests:
              cpu: '0.35' # Currently an empty small vpc with 1 cpu has 0.7 left. For rolling updates to work this needs to be half
              memory: '0.9G' # Currently an empty small vpc has 1.8G left.